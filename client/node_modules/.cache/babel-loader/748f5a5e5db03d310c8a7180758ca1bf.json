{"ast":null,"code":"import{createStore,applyMiddleware}from'redux';import reduxThunk from'redux-thunk';import rootReducer from'./reducers/index';function saveToLocalStorage(state){try{var serializedState=JSON.stringify(state);localStorage.setItem('state',serializedState);}catch(err){console.log('error occured ',err);}}function loadFromLocalStorage(){try{var serializedState=localStorage.getItem('state');if(serializedState===null)return undefined;return JSON.parse(serializedState);}catch(err){console.log('error occured ',err);}}var persistedState=loadFromLocalStorage();var store=createStore(rootReducer,persistedState,applyMiddleware(reduxThunk));store.subscribe(function(){return saveToLocalStorage(store.getState());});export default store;","map":{"version":3,"sources":["C:/Users/dilji/capstone/sync/Capstone-project/client/src/store.js"],"names":["createStore","applyMiddleware","reduxThunk","rootReducer","saveToLocalStorage","state","serializedState","JSON","stringify","localStorage","setItem","err","console","log","loadFromLocalStorage","getItem","undefined","parse","persistedState","store","subscribe","getState"],"mappings":"AAAA,OAASA,WAAT,CAAsBC,eAAtB,KAA6C,OAA7C,CACA,MAAOC,CAAAA,UAAP,KAAuB,aAAvB,CACA,MAAOC,CAAAA,WAAP,KAAwB,kBAAxB,CAGA,QAASC,CAAAA,kBAAT,CAA4BC,KAA5B,CAAmC,CAC/B,GAAI,CACA,GAAMC,CAAAA,eAAe,CAAGC,IAAI,CAACC,SAAL,CAAeH,KAAf,CAAxB,CACAI,YAAY,CAACC,OAAb,CAAqB,OAArB,CAA8BJ,eAA9B,EAEH,CAAC,MAAOK,GAAP,CAAY,CACVC,OAAO,CAACC,GAAR,CAAY,gBAAZ,CAA8BF,GAA9B,EACH,CACJ,CAED,QAASG,CAAAA,oBAAT,EAAgC,CAC5B,GAAI,CACA,GAAMR,CAAAA,eAAe,CAAGG,YAAY,CAACM,OAAb,CAAqB,OAArB,CAAxB,CACA,GAAIT,eAAe,GAAK,IAAxB,CAA8B,MAAOU,CAAAA,SAAP,CAC9B,MAAOT,CAAAA,IAAI,CAACU,KAAL,CAAWX,eAAX,CAAP,CAEH,CAAC,MAAOK,GAAP,CAAY,CACVC,OAAO,CAACC,GAAR,CAAY,gBAAZ,CAA8BF,GAA9B,EACH,CACJ,CAED,GAAMO,CAAAA,cAAc,CAAGJ,oBAAoB,EAA3C,CAEA,GAAMK,CAAAA,KAAK,CAAGnB,WAAW,CAACG,WAAD,CAAce,cAAd,CAA8BjB,eAAe,CAACC,UAAD,CAA7C,CAAzB,CAEAiB,KAAK,CAACC,SAAN,CAAgB,iBAAMhB,CAAAA,kBAAkB,CAACe,KAAK,CAACE,QAAN,EAAD,CAAxB,EAAhB,EAEA,cAAeF,CAAAA,KAAf","sourcesContent":["import { createStore, applyMiddleware } from 'redux';\r\nimport reduxThunk from 'redux-thunk';\r\nimport rootReducer from './reducers/index';\r\n\r\n\r\nfunction saveToLocalStorage(state) {\r\n    try {\r\n        const serializedState = JSON.stringify(state);\r\n        localStorage.setItem('state', serializedState);\r\n\r\n    } catch (err) {\r\n        console.log('error occured ', err)\r\n    }\r\n}\r\n\r\nfunction loadFromLocalStorage() {\r\n    try {\r\n        const serializedState = localStorage.getItem('state');\r\n        if (serializedState === null) return undefined;\r\n        return JSON.parse(serializedState);\r\n\r\n    } catch (err) {\r\n        console.log('error occured ', err)\r\n    }\r\n}\r\n\r\nconst persistedState = loadFromLocalStorage();\r\n\r\nconst store = createStore(rootReducer, persistedState, applyMiddleware(reduxThunk));\r\n\r\nstore.subscribe(() => saveToLocalStorage(store.getState()))\r\n\r\nexport default store;"]},"metadata":{},"sourceType":"module"}